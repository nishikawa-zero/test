/*
 *    Class definition of the SoC Designer component <SD_AXIv2_DummyGraphicsMacroModel2Axi>
 *
 *    This code has been generated by the SoC Designer Component Wizard.
 *    Copyright (c)  2008-2010 Carbon Design Systems Inc.
 *
 * THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND TRADE SECRETS OF CARBON
 * DESIGN SYSTEMS, INC.  PERMISSION IS HEREBY GRANTED TO USE, MODIFY, AND/OR COPY
 * THIS SOFTWARE FOR INTERNAL USE ONLY PROVIDED THAT THE ABOVE COPYRIGHT NOTICE
 * APPEARS IN ALL COPIES OF THIS SOFTWARE.
 */

#ifndef SD_AXIv2_DummyGraphicsMacroModel2Axi__H
#define SD_AXIv2_DummyGraphicsMacroModel2Axi__H

#include "maxsimCompatibility.h"

#include "eslapi/CASISaveRestore.h"

/* FSL code begin */
#include "DummyGraphicsMacroModel_wrapperbase.h"
#include "fj_datatype.h"

#define DATA_WIDTH_32  fj::uint32
#define DATA_WIDTH_64  fj::uint64
#define DATA_WIDTH_128 fj::uint128
#define OUTPUT_TYPE   fj::uint8
/* FSL code end */

// Place global class declarations here:

template<class WrapperClass>
class DummyGraphicsMacroModel_interrupt_SS;

template<class WrapperClass>
class DummyGraphicsMacroModel_reset_x_SS;

template<class WrapperClass>
class DummyGraphicsMacroModel_AXI_Master_Port;

class SD_AXIv2_DummyGraphicsMacroModel2Axi : public CASIModule
    , public CASISaveRestore
{
  // Declare your friends here:
  friend class DummyGraphicsMacroModel_AXI_Master_Port<SD_AXIv2_DummyGraphicsMacroModel2Axi>;
  friend class DummyGraphicsMacroModel_interrupt_SS<SD_AXIv2_DummyGraphicsMacroModel2Axi>;
  friend class DummyGraphicsMacroModel_reset_x_SS<SD_AXIv2_DummyGraphicsMacroModel2Axi>;

public:
  // Place instance declarations for the Ports here:
  DummyGraphicsMacroModel_AXI_Master_Port<SD_AXIv2_DummyGraphicsMacroModel2Axi>* AXIv2_master_TMaster[2];
  DummyGraphicsMacroModel_interrupt_SS<SD_AXIv2_DummyGraphicsMacroModel2Axi>* DummyGraphicsMacroModel2Axi_interrupt_SSlave[4];
  sc_port<CASISignalIF> *output_SMaster[4];
  DummyGraphicsMacroModel_reset_x_SS<SD_AXIv2_DummyGraphicsMacroModel2Axi>* DummyGraphicsMacroModel2Axi_reset_x_SSlave;
  
  // constructor / destructor
  SD_AXIv2_DummyGraphicsMacroModel2Axi(CASIModuleIF* c, const string &s);
  virtual ~SD_AXIv2_DummyGraphicsMacroModel2Axi();

  // overloaded methods for clocked components
  void communicate();
  void update();

  // Implementation of CASISaveRestore interface methods
  virtual bool saveData( CASIODataStream &data );
  virtual bool restoreData( CASIIDataStream &data );

  // overloaded CASIModule methods
  string getName();
  void setParameter(const string &name, const string &value);
  string getProperty( eslapi::CASIPropertyType property );
  void init();

  void terminate();
  void reset(eslapi::CASIResetLevel level, const CASIFileMapIF *filelist);

  //Initialize the Port Properties
  void initSignalPort(CASISignalMasterIF* signalIf);
  void initAXIv2TransactionPort(CASITransactionMasterIF* transIf);

private:
  // parameters
  bool p_enableDbgMsg;
  unsigned int p_model_id;
  unsigned int p_rch_number;
  unsigned int p_wch_number;
  unsigned int p_core_number;
  unsigned int p_read_outstanding_number;
  unsigned int p_write_outstanding_number;
  unsigned int p_core_idle_status;
  bool p_no_r_receive;
  bool p_no_b_receive;
  string p_time_unit;
  unsigned int p_axi_clock;
  unsigned int p_core_clock;
  string p_buffer_parameter_file_name;
  string p_output_vcd_file_name;
  string p_output_csv_file_name;
  string p_output_summary_file_name;

  int          p_Data_Bit_Width;
  int          p_Address_Bit_Width;

  // place your private functions and data members here:
  // ...
  // This shows an example state variable for the save/restore mechanism.
  // int    exampleStateVariable;


  /* FSL code begin */
  void doneSendAW(void);
  void doneSendW(void);
  void doneSendAR(void);

  void getsendAW(void);
  void getsendW(void);
  void getsendB(void);
  void getsendAR(void);
  void getsendR(void);

  int getDataWidth(void);
  void controlInterrupt(void);
  void controlOutput(void);

  fj::uint64 m_b_count; /**< increment when AW is transfered and decrement when B is transfered */
  fj::uint64 m_r_count; /**< save ARLEN and decrement when R is transfered */

  DummyGraphicsMacroModel_wrapperbase<DATA_WIDTH_64, 2>  *core_64;

  sc_signal<bool> m_signal_reset_x;
  sc_signal<bool> m_signal_interrupt[4];
  sc_signal<bool> m_signal_output[4];

  bool m_interrupt_1bit[4];
  bool m_previous_output_value[4];
  /* FSL code end */

};

#endif
